<?php

define ('D500PX_HOST', 'http://500px.com');
define ('D500PX_API', 'https://api.500px.com');


/**
 * Implements hook_menu().
 */
function d500px_menu() {
  $items['d500px/test'] = array(
    'title' => '500px test',
    'access callback' => TRUE,
    'page callback' => 'd500px_test',
    'type' => MENU_CALLBACK,
    'file' => 'd500px.lib.php',
  );


  $items['d500px/oauth'] = array(
    'title' => '500px OAuth',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('d500px_oauth_callback'),
    'type' => MENU_CALLBACK,
    'file' => 'd500px.pages.inc',
  );


  $items['admin/config/services/d500px'] = array(
    'title' => '500px Integration Settings',
    'description' => '500px settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('d500px_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'd500px.pages.inc',
  );
  
    
  $items['admin/config/services/d500px/default'] = array(
    'title' => '500px Integration Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
    
  return $items;  
}


function d500px_test() {
  $d500px_username = '';
  $connection = d500px_connection();
  $content  = $connection->call('photos', array('feature' => 'fresh_today'));
  $content2  = $connection->call('photos', array('feature' => 'user', 'username' => $d500px_username));
  
  //dpm($content);
  //dpm($content2);
  
  return 'Hello';
}


function d500px_connection() {
  /* Build D500px object with client credentials. */
  $d500px_consumer_key = variable_get('d500px_consumer_key', '');
  $d500px_consumer_secret = variable_get('d500px_consumer_secret', '');

  
  $connection = new D500px($d500px_consumer_key, $d500px_consumer_secret);
  
  return $connection;
}


/**
 * Implements hook_block_info().
 */
function d500px_block_info() {

  $blocks['d500px_block_1'] = array(
    'info' => t('500px block 1'),
  );

  return $blocks;
}


/**
 * Implements hook_block_configure().
 */
function d500px_block_configure($delta = '') {

  $form = array();
  // load up the custom form values for this block
  $previous_settings = variable_get($delta, array());
  
  // get the common form
  $form += d500px_block_commonform($previous_settings);
  
  if ($delta == 'd500px_block_1') {
    
    // todo
  }
  
  return $form;
}


/**
 * Implements hook_block_save().
 */
function d500px_block_save($delta = '', $edit = array()) {
  if ($delta == 'd500px_block_1') {
          
    // todo
  }
  
  // store all custom form values
  variable_set($delta, $edit);
  
  return;
}


/**
 * Implements hook_block_view().
 */
function d500px_block_view($delta = '') {

  switch ($delta) {
    case 'd500px_block_1':
      //$block['subject'] = t('500px Popular Photos');
      $block['content'] = d500px_block_contents($delta);
      break;
  }
  
  return $block;
}


/**
 * lets generate block contents.
 */
function d500px_block_contents($delta) {
  $output = array();

  $connection = d500px_connection();
  //$content  = $connection->call('photos', array('feature' => 'fresh_today'));
  //$content = $connection->call('photos', array('feature' => $feature, 'username' => $d500px_username));

  $block_settings = variable_get($delta, array());

  // there is nothing to display if there is no feature 
  if (!isset($block_settings['feature'])) {
    return;
  }

  // work out image sizes
  // by default we will fetch an array
  $image_size = array_filter($block_settings['image_size']);
  $image_size_key = 'image_size[]';
  
  // if sizes its not array, we are fetching a single size
  if (count($image_size) == 1) {
    $image_size_key = 'image_size';
    $image_size = array_pop($image_size);
  }

  $params = array(
    'feature' => $block_settings['feature'], 
    'rpp' => $block_settings['rpp'],
    $image_size_key => $image_size,
  );
  
  // add category if its not all
  if ($block_settings['only'] != '- All -') {
    $params += array('only' => $block_settings['only']);
  }
  
  $content = $connection->call('photos', $params);
  
  //dpm($content);
  
  $output['#markup'] = 'foobar';
  

}


function d500px_block_commonform($previous_settings) {
  $form = array();
  
  $nsfw = 0;
  if (isset($previous_settings['nsfw'])) { $nsfw = $previous_settings['nsfw']; }
  
  $rpp = 20;
  if (isset($previous_settings['rpp'])) { $rpp = $previous_settings['rpp']; }  
  
  $image_size = array(2 => 1);
  if (isset($previous_settings['image_size'])) { $image_size = $previous_settings['image_size']; }
  
  $feature = 'fresh_today';
  if (isset($previous_settings['feature'])) { $feature = $previous_settings['feature']; }      

  $username = '';
  if (isset($previous_settings['username'])) { $username = $previous_settings['username']; }      

  $only = '- All -';
  if (isset($previous_settings['only'])) { $only = $previous_settings['only']; }  

  $form['d500px_block_common'] = array(
    '#type' => 'fieldset', 
    '#title' => t('500px Block Settings'), 
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
  );

  $form['d500px_block_common']['feature'] = array(
    '#type'               => 'select', 
    '#title'              => t('Photo stream to be retrieved?'),
    '#options'            => array(
                                    "popular" => t("Popular"),
                                    "upcoming" => t("Upcoming"),
                                    "editors" => t("Editors' Choice"),
                                    "fresh_today" => t("Fresh Today"),
                                    "fresh_yesterday" => t("Fresh Yesterday"),
                                    "fresh_week" => t("Fresh This Week"),
                                    "user" => t("User"),
                             ),
    '#default_value'      => $feature,
    '#description'        => t('Photo stream to be retrieved. Default fresh_today.'),
    //'#required'           => TRUE,
  );
    
  $form['d500px_block_common']['rpp'] = array(
    '#type'               => 'select', 
    '#title'              => t('Number of photos to display?'),
    '#options'            => array(10 => 10, 20 => 20, 30 => 30, 40 => 40, 50 => 50, 60 => 60, 70 => 70, 80 => 80, 90 => 90, 100 => 100),
    '#default_value'      => $rpp,
    '#description'        => t('The number of results to return. Can not be over 100, default is 20.'),
    //'#required'           => TRUE,
  );

  $form['d500px_block_common']['image_size'] = array(
    '#type'               => 'checkboxes', 
    '#title'              => t('Photo sizes to get?'),
    '#options'            => array(1 => 1, 2 => 2, 3 => 3, 4 => 4),
    '#default_value'      => $image_size,
    '#description'        => t('The photo size to be returned.'),
    '#required'           => TRUE,
  );
  
  $form['d500px_block_common']['nsfw'] = array(
    '#type'               => 'checkbox', 
    '#title'              => t('Display NSFW photos?'),
    '#default_value'      => $nsfw,
    '#description'        => t('Some photos are Not Safe For Work, use with care.'),
  );  

  $form['d500px_block_common']['username'] = array(
    '#type'               => 'textfield', 
    '#title'              => t('Username'), 
    '#default_value'      => $username, 
    '#required'           => FALSE,
    '#description'        => t('All per-user streams require a user_id or username parameter.'),
    '#element_validate'   => array('d500px_block_commonform_username_validate'),
  );

  $form['d500px_block_common']['only'] = array(
    '#type'               => 'select', 
    '#title'              => t('Photo Category'),
    '#options'            => array(
                                    '- All -' => '- All -',
                                    'Uncategorized'   => 'Uncategorized',
                                    'Abstract'  => 'Abstract',
                                    'Animals'  => 'Animals',
                                    'Black and White'   => 'Black and White',
                                    'Celebrities'   => 'Celebrities',
                                    'City and Architecture'   => 'City and Architecture',
                                    'Commercial'  => 'Commercial',
                                    'Concert'  => 'Concert',
                                    'Family'  => 'Family',
                                    'Fashion'  => 'Fashion',
                                    'Film'  => 'Film',
                                    'Fine Art'  => 'Fine Art',
                                    'Food'  => 'Food',
                                    'Journalism'   => 'Journalism',
                                    'Landscapes'   => 'Landscapes',
                                    'Macro'  => 'Macro',
                                    'Nature'  => 'Nature',
                                    'Nude'  => 'Nude',
                                    'People'  => 'People',
                                    'Performing Arts'  => 'Performing Arts',
                                    'Sport'  => 'Sport',
                                    'Still Life'   => 'Still Life',
                                    'Street'  => 'Street',
                                    'Transporation'  => 'Transporation',
                                    'Travel'  => 'Travel',
                                    'Underwater'  => 'Underwater',
                                    'Urban Exploration'  => 'Urban Exploration',
                                    'Wedding'  => 'Wedding',    
                             ),
    '#default_value'      => $only,
    '#description'        => t('If you want results from a specific category'),
    '#required'           => TRUE,
  );
  
  return $form;
}


function d500px_block_commonform_username_validate($element, &$form_state, $form) {
  if (($form_state['values']['feature'] == 'user') and (empty($element['#value']))) {
    form_error($element, t("Additional parameter 'username' is required"));
  }
}