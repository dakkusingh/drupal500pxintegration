<?php

/**
 * Implements hook_block_info().
 */
function d500px_blocks_block_info() {
  $blocks = array();
  
  $max = variable_get('d500px_blocks_number_blocks', 1);
  
  for ($count = 0; $count < $max; $count++) {
    $delta = 'd500px_blocks_block_'. $count; 
    
    // block 0 is confusing
    $title_count = $count + 1;
    
    $previous_settings = variable_get($delta, array());

    $title = t('500px: unconfigured block: ') . ' ' . $title_count;
   
    // TODO: better titles??
    if (!empty($previous_settings['feature'])) {
      
      // add title and feature
      $title = t('500px: ') . $previous_settings['feature']; 
      
      // user feature? add username
      if ($previous_settings['feature'] == 'user') {
        $title .= ':'. $previous_settings['username'];
      }

      // selected album? add album name
      if ($previous_settings['only'] != '- All -') {
        $title .= ' - '. $previous_settings['only'];
      }
      
      // finally add number of items
      $title .= ' ('. $previous_settings['rpp'] .')'; 
    }
    
    $blocks[$delta] = array(
      'info' => $title,
      'cache' => DRUPAL_NO_CACHE,
    );
  }  

  return $blocks;
}



/**
 * Implements hook_block_configure().
 */
function d500px_blocks_block_configure($delta = '') {
  $form = array();
  // load up the custom form values for this block
  $previous_settings = variable_get($delta, array());
  
  // get the common form
  $form += d500px_blocks_block_commonform($previous_settings);
  
  return $form;
}



/**
 * Implements hook_block_save().
 */
function d500px_blocks_block_save($delta = '', $edit = array()) {
  // store all custom form values
  variable_set($delta, $edit);
  
  return;
}



/**
 * Implements hook_block_view().
 */
function d500px_blocks_block_view($delta = '') {
  $block['content'] = d500px_blocks_block_contents($delta);
  return $block;
}



/**
 * lets generate block contents.
 */
function d500px_blocks_block_contents($delta) {
  $output = array();

  $connection = d500px_connection();
  $block_settings = variable_get($delta, array());
  
  // there is nothing to display if there is no feature 
  if (!isset($block_settings['feature'])) {
    return;
  }

  // work out image sizes
  // by default we will fetch an array
  $image_size = array_filter($block_settings['image_size']);
  $image_size_key = 'image_size[]';
  
  // if sizes its not array, we are fetching a single size
  if (count($image_size) == 1) {
    $image_size_key = 'image_size';
    $image_size = array_pop($image_size);
  }

  $params = array(
    'feature' => $block_settings['feature'], 
    'rpp' => $block_settings['rpp'],
    $image_size_key => $image_size,
  );
  
  // add category if its not all
  if ($block_settings['only'] != '- All -') {
    $params += array('only' => $block_settings['only']);
  }

  // add username
  if (!empty($block_settings['username'])) {
    $params += array('username' => $block_settings['username']);
  }
  
  $content = $connection->call('photos', $params);
  //dpm($params);
  //dpm($content);
  
  $output['#markup'] = 'this is a dev version of the 500px module and content is yet to be themed';
  
  return $output;
}




/**
 * implimentation of hook_form_FORM_ID_alter()
 */
function d500px_blocks_form_d500px_admin_form_alter(&$form, &$form_state, $form_id) {

  $form['d500px_blocks'] = array(
    '#type' => 'fieldset', 
    '#title' => t('500px Block Config'), 
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
  );

  $form['d500px_blocks']['d500px_blocks_number_blocks'] = array(
    '#type'               => 'select', 
    '#title'              => t('Number of blocks required?'),
    '#options'            => array_combine(range(1,20),range(1,20)),
    '#default_value'      => variable_get('d500px_blocks_number_blocks', 1),
    '#description'        => t('The number of blocks can be increased or decreased at any time. Default is 1 block.'),
    //'#required'           => TRUE,
  );  
  
}